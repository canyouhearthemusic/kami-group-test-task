// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reservation.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservations(room_id, start_time, end_time) VALUES ($1, $2, $3) RETURNING id, room_id, start_time, end_time
`

type CreateReservationParams struct {
	RoomID    int32
	StartTime pgtype.Timestamptz
	EndTime   pgtype.Timestamptz
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, createReservation, arg.RoomID, arg.StartTime, arg.EndTime)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations WHERE id = $1
`

func (q *Queries) DeleteReservation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteReservation, id)
	return err
}

const getAllReservations = `-- name: GetAllReservations :many
SELECT id, room_id, start_time, end_time FROM reservations
`

func (q *Queries) GetAllReservations(ctx context.Context) ([]Reservation, error) {
	rows, err := q.db.Query(ctx, getAllReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReservation = `-- name: GetReservation :one
SELECT id, room_id, start_time, end_time FROM reservations WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReservation(ctx context.Context, id int32) (Reservation, error) {
	row := q.db.QueryRow(ctx, getReservation, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const getReservationsByRoomID = `-- name: GetReservationsByRoomID :many
SELECT id, room_id, start_time, end_time FROM reservations WHERE room_id = $1
`

func (q *Queries) GetReservationsByRoomID(ctx context.Context, roomID int32) ([]Reservation, error) {
	rows, err := q.db.Query(ctx, getReservationsByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :one
UPDATE reservations SET
    room_id = $2,
    start_time = $3,
    end_time = $4
WHERE id = $1
RETURNING id, room_id, start_time, end_time
`

type UpdateReservationParams struct {
	ID        int32
	RoomID    int32
	StartTime pgtype.Timestamptz
	EndTime   pgtype.Timestamptz
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, updateReservation,
		arg.ID,
		arg.RoomID,
		arg.StartTime,
		arg.EndTime,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}
